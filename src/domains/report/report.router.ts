import { Injectable } from '@nestjs/common';
import { Context, Markup } from 'telegraf';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';

import { Report } from 'src/domains/entity/report.entity';
import { Status } from 'src/domains/entity/status/status.entity';
import { User } from 'src/domains/entity/user.entity';

import { StateService } from 'src/core/state/state.service';
import { BaseRouter } from 'src/core/route/state-routing';
import { ReportState } from 'src/domains/report/report.enum';
import { StatusCode } from 'src/domains/entity/status/status.enum';
import { Message } from '@telegraf/types/message';

@Injectable()
export class ReportsRouter {
  constructor(
    private readonly stateService: StateService,
    private readonly router: BaseRouter,

    @InjectRepository(Report)
    private readonly reportRepo: Repository<Report>,
    @InjectRepository(Status)
    private readonly statusRepo: Repository<Status>,
    @InjectRepository(User)
    private readonly userRepo: Repository<User>,
  ) {
    // –º–∞—Ä—à—Ä—É—Ç—ã
    router.register(ReportState.create_report, this.createReport.bind(this));
  }

  /**
   * –®–∞–≥ ¬´–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É¬ª: –±–æ—Ç —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª —á–µ–ª–æ–≤–µ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   * ReportState.create_report (–Ω–∞–ø—Ä–∏–º–µ—Ä –º–µ—Ç–æ–¥–æ–º createQuestion).
   * –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ, —Å–æ–∑–¥–∞—ë–º Report, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º state.
   */
    async createReport(ctx: Context) {
        const tgId = ctx.from?.id;
        if (!tgId) return;

        const user = await this.userRepo.findOne({
            where: { telegramId: String(tgId) },
        });
        if (!user) {
            await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
            return;
        }

        // --- —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ ---
        const text = ctx?.text ?? '';
        const photoArr = (ctx.message as Message.PhotoMessage)?.photo;
        const photoId =
            photoArr && photoArr.length > 0
            ? photoArr[photoArr.length - 1].file_id
            : '';

        // --- —Å—Ç–∞—Ç—É—Å ¬´–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç¬ª ---
        const status = await this.statusRepo.findOne({
            where: { name: StatusCode.NewReport },
        });
        if (!status) {
            await ctx.reply('–û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å NewReport –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }
        // --- —Å–æ–∑–¥–∞—ë–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–ø–æ—Ä—Ç ---
        const report = this.reportRepo.create({
            user,
            status,
            text,
            photoId,
            created_at: new Date(),
            status_updated_at: new Date(),
        });
        await this.reportRepo.save(report);

        await ctx.reply('üìù –†–µ–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω, —Å–ø–∞—Å–∏–±–æ!')
        await this.stateService.clearState(String(tgId));
    }

    async createQuestion(ctx : Context) {
        const id = ctx.from?.id
        if(!id) return;
            
        await ctx.reply("–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É")
        this.stateService.setState(String(id), ReportState.create_report)
    }

  /**
   * –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—Å–µ—Ö ‚Äî –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   * –æ—Ç –ª–æ–≥–∏–∫–∏ (–∑–¥–µ—Å—å –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π –ø—Ä–∏–º–µ—Ä ¬´–≤—Å–µ —á—Ç–æ –µ—Å—Ç—å¬ª).
   */
    async listReports(ctx: Context) {
        const reports = await this.reportRepo.find({
            relations: ['status'],
            order: { created_at: 'DESC' },
        });

        if (!reports.length) {
            await ctx.reply('üóíÔ∏è –†–µ–ø–æ—Ä—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
            return;
        }

        for (const r of reports) {
            await ctx.replyWithMarkdown(
            `*–†–µ–ø–æ—Ä—Ç #${r.id}*\n` +
                `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${r.user?.firstName ?? '‚Äî'}\n` +
                `üìÖ –°–æ–∑–¥–∞–Ω: ${r.created_at.toLocaleDateString()}\n` +
                `üîÑ –°—Ç–∞—Ç—É—Å: ${r.status.name}\n` +
                (r.text ? `\n${r.text}` : ''),
            );

            if (r.photoId) {
            await ctx.replyWithPhoto(r.photoId);
            }
        }
    }
    async OnGetReports(ctx: Context) {
        const reports = await this.reportRepo.find();
        
        if (reports.length === 0) {
            await ctx.reply('–û—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        for (const report of reports) {
            await ctx.replyWithMarkdown(
                `*–û—Ç—á–µ—Ç #${report.id}*\n` +
                `üïí—Å–æ–∑–¥–∞–Ω–æ: ${report.created_at.toLocaleDateString()}\n` +
                `üïí–∏–∑–º–µ–Ω–µ–Ω–æ: ${report.status_updated_at.toLocaleDateString()}\n` +
                `üîÑ—Å—Ç–∞—Ç—É—Å: ${report.status.name}`
            );
        }
    }
}
